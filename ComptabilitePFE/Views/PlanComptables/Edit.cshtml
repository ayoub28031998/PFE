@model ComptabilitePFE.PlanComptable

@{
    ViewBag.Title = "Edit";
}

<form method="post" id="editPanComptableForm">
    @Html.AntiForgeryToken()
    <br>
    <div class="card card-warning cardWidth mx-auto">
        <div class="card-header">
            <h3 class="card-title"><b>Compte/Edit</b></h3>
            <a href="@Url.Action("index")" class="btn btn-tool mt-0" style="float:right"><i class="fas fa-times"></i></a>
        </div>
        <!-- /.card-header -->

        <div class="card-body">

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-8" for="NumeroCompte">NumeroCompte</label>

                        <input class="form-control text-box single-line" disabled="disabled" id="NumeroCompte" name="NumeroCompte" type="text" value="@Model.NumeroCompte">


                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-8" for="Libelle">Libelle</label>

                        <input class="form-control text-box single-line" data-val="true" data-val-length="200 caractéres" data-val-length-max="200" data-val-required="Ce champ est obligatoire" id="Libelle" name="Libelle" type="text" value="@Model.Libelle">
                        <span class="field-validation-valid text-danger" data-valmsg-for="Libelle" data-valmsg-replace="true"></span>

                    </div>
                </div>
                <div class="col-md-2">
                    &nbsp;
                </div>
                <div class="col-md-4">

                    <div class="form-group ">
                        <label>TypeCompte</label>

                       
                        <div> <input id="TypeCompte1" name="TypeCompte" type="radio" value="r" @(Model.TypeCompte.ToUpper().StartsWith("R") ? "checked" : "")><label for="TypeCompte1">Racine</label></div>
                        <div> <input id="TypeCompte2" name="TypeCompte" type="radio" value="a" @(Model.TypeCompte.ToUpper().StartsWith("A") ? "checked" : "")><label for="TypeCompte2">Auxiliaire</label></div>
                        <div> <input id="TypeCompte3" name="TypeCompte" type="radio" value="m" @(Model.TypeCompte.ToUpper().StartsWith("M") ? "checked" : "")><label for="TypeCompte3">Mouvement</label></div>
                       
                    </div>

                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="submitButton" value="Modifier" class="btn btn-outline-warning">
            </div>
        </div>

    </div>
</form>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/FrontEND/plugins/sweetalert2/sweetalert2.all.js"></script>
    <script>
        $(document).on('click', '#submitButton', function () {
            if (validateForm()) {
                var postForm = $('#editPanComptableForm').serializeArray();
                postForm.push({ name: 'NumeroCompte', value: $('#NumeroCompte').val() });
                $.ajax({
                    url: '@Url.Action("edit")',
                    type: 'post',
                    data: postForm,
                    success: function (result) {
                        if (result == 'success') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Succés',
                                text: 'Plan comptable modifié avec succés!'
                            }).then(() => location.href = '@Url.Action("index")');
                        }
                        else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Erreur',
                                text: 'Une erreur s\'est produite, contactez l\'administrateur!'
                            });
                        }
                    }
                });
            }
        });

        function validateForm() {
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            });

            if ($('#Libelle').val() == '') {
                Toast.fire({
                    icon: 'error',
                    title: 'Libelle obligatoire!'
                });
                return false;
            }

            return true;
        }
    </script>

}
